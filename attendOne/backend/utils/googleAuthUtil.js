[{'file_name': 'User.js', 'file_path': 'attendOne/backend/models/User.js', 'file_code': "```javascript\nconst { Sequelize, Model, DataTypes } = require('sequelize');\nconst bcrypt = require('bcrypt');\n\nconst sequelize = new Sequelize('attendOne', 'root', 'root', {\n  host: 'db',\n  port: 3306,\n  dialect: 'mysql'\n});\n\nclass User extends Model {}\n\nUser.init({\n  id: {\n    type: DataTypes.INTEGER.UNSIGNED,\n    allowNull: false,\n    autoIncrement: true,\n    primaryKey: true\n  },\n  firstName: {\n    type: DataTypes.STRING,\n    allowNull: false\n  },\n  familyName: {\n    type: DataTypes.STRING,\n    allowNull: false\n  },\n  email: {\n    type: DataTypes.STRING,\n    allowNull: false,\n    unique: true,\n    validate: {\n      isEmail: true\n    }\n  },\n  phoneNumber: {\n    type: DataTypes.STRING,\n    allowNull: true,\n    unique: true\n  },\n  passwordHash: {\n    type: DataTypes.STRING,\n    allowNull: true\n  },\n  googleId: {\n    type: DataTypes.STRING,\n    allowNull: true,\n    unique: true\n  }\n}, {\n  sequelize,\n  modelName: 'User',\n  tableName: 'users',\n  timestamps: false,\n  hooks: {\n    beforeCreate: async (user) => {\n      if (user.password) {\n        const salt = await bcrypt.genSalt(10);\n        user.passwordHash = await bcrypt.hash(user.password, salt);\n      }\n    },\n    beforeUpdate: async (user) => {\n      if (user.password) {\n        const salt = await bcrypt.genSalt(10);\n        user.passwordHash = await bcrypt.hash(user.password, salt);\n      }\n    }\n  }\n});\n\nObject.defineProperty(User.prototype, 'password', {\n  get() {\n    return this._password;\n  },\n  set(value) {\n    this._password = value;\n  }\n});\n\nUser.prototype.validatePassword = async function(password) {\n  if (!this.passwordHash) return false;\n  return await bcrypt.compare(password, this.passwordHash);\n};\n\nmodule.exports = User;\n```"}, {'file_name': 'authController.js', 'file_path': 'attendOne/backend/controllers/authController.js', 'file_code': "```javascript\nconst jwt = require('jsonwebtoken');\nconst { Op } = require('sequelize');\nconst User = require('../models/User');\n\nfunction generateToken(payload) {\n  return jwt.sign(payload, process.env.JWT_SECRET, { expiresIn: '1h' });\n}\n\nasync function registerUser(req, res) {\n  try {\n    const { firstName, familyName, email, phoneNumber, password } = req.body;\n\n    const existingUser = await User.findOne({\n      where: {\n        [Op.or]: [{ email }, { phoneNumber }],\n      },\n    });\n\n    if (existingUser) {\n      return res.status(400).json({ error: 'User with provided email or phone number already exists' });\n    }\n\n    const newUser = await User.create({\n      firstName,\n      familyName,\n      email,\n      phoneNumber,\n      password,\n    });\n\n    return res.status(201).json({ message: 'User registered successfully', userId: newUser.id });\n  } catch (error) {\n    return res.status(500).json({ error: 'An error occurred during registration' });\n  }\n}\n\nasync function loginUser(req, res) {\n  try {\n    const { emailOrPhone, password } = req.body;\n\n    const user = await User.findOne({\n      where: {\n        [Op.or]: [{ email: emailOrPhone }, { phoneNumber: emailOrPhone }],\n      },\n    });\n\n    if (!user) {\n      return res.status(400).json({ error: 'Invalid email/phone or password' });\n    }\n\n    const validPassword = await user.validatePassword(password);\n\n    if (!validPassword) {\n      return res.status(400).json({ error: 'Invalid email/phone or password' });\n    }\n\n    const tokenPayload = { id: user.id, email: user.email };\n    const token = generateToken(tokenPayload);\n\n    return res.status(200).json({ message: 'Login successful', token });\n  } catch (error) {\n    return res.status(500).json({ error: 'An error occurred during login' });\n  }\n}\n\nasync function requestPasswordReset(req, res) {\n  try {\n    const { email } = req.body;\n\n    const user = await User.findOne({ where: { email } });\n\n    if (user) {\n      // Implement password reset token generation and email sending\n    }\n\n    return res.status(200).json({ message: 'If an account with that email exists, a password reset link has been sent' });\n  } catch (error) {\n    return res.status(500).json({ error: 'An error occurred during password reset' });\n  }\n}\n\nmodule.exports = {\n  registerUser,\n  loginUser,\n  requestPasswordReset,\n  generateToken,\n};\n```"}, {'file_name': 'authRoutes.js', 'file_path': 'attendOne/backend/routes/authRoutes.js', 'file_code': "```javascript\nconst express = require('express');\nconst router = express.Router();\nconst authController = require('../controllers/authController');\nconst googleAuthUtil = require('../utils/googleAuthUtil');\n\nrouter.post('/register', authController.registerUser);\nrouter.post('/login', authController.loginUser);\nrouter.post('/password-reset', authController.requestPasswordReset);\n\nrouter.get('/google', (req, res) => {\n  const url = googleAuthUtil.getAuthUrl();\n  res.redirect(url);\n});\n\nrouter.get('/google/callback', async (req, res) => {\n  const code = req.query.code;\n\n  try {\n    const googleUser = await googleAuthUtil.getUserInfo(code);\n    const user = await googleAuthUtil.findOrCreateUser(googleUser);\n\n    const tokenPayload = { id: user.id, email: user.email };\n    const token = authController.generateToken(tokenPayload);\n\n    res.redirect(`/?token=${token}`);\n  } catch (error) {\n    res.status(500).json({ error: 'An error occurred during Google authentication' });\n  }\n});\n\nmodule.exports = router;\n```"}, {'file_name': 'googleAuthUtil.js', 'file_path': 'attendOne/backend/utils/googleAuthUtil.js', 'file_code': "```javascript\nconst { google } = require('googleapis');\nconst User = require('../models/User');\n\nconst CLIENT_ID = process.env.GOOGLE_CLIENT_ID;\nconst CLIENT_SECRET = process.env.GOOGLE_CLIENT_SECRET;\nconst REDIRECT_URI = process.env.GOOGLE_REDIRECT_URI;\n\nconst oauth2Client = new google.auth.OAuth2(\n  CLIENT_ID,\n  CLIENT_SECRET,\n  REDIRECT_URI\n);\n\nfunction getAuthUrl() {\n  const scopes = [\n    'https://www.googleapis.com/auth/userinfo.profile',\n    'https://www.googleapis.com/auth/userinfo.email'\n  ];\n\n  const url = oauth2Client.generateAuthUrl({\n    access_type: 'offline',\n    scope: scopes,\n  });\n\n  return url;\n}\n\nasync function getUserInfo(code) {\n  const { tokens } = await oauth2Client.getToken(code);\n  oauth2Client.setCredentials(tokens);\n\n  const oauth2 = google.oauth2({\n    auth: oauth2Client,\n    version: 'v2'\n  });\n\n  const { data } = await oauth2.userinfo.get();\n\n  return data;\n}\n\nasync function findOrCreateUser(googleUser) {\n  const {\n    id: googleId,\n    email,\n    given_name: firstName,\n    family_name: familyName\n  } = googleUser;\n\n  let user = await User.findOne({\n    where: {\n      [User.sequelize.Op.or]: [\n        { googleId },\n        { email }\n      ]\n    }\n  });\n\n  if (!user) {\n    user = await User.create({\n      firstName,\n      familyName,\n      email,\n      googleId,\n      passwordHash: null\n    });\n  } else if (!user.googleId) {\n    user.googleId = googleId;\n    await user.save();\n  }\n\n  return user;\n}\n\nmodule.exports = {\n  getAuthUrl,\n  getUserInfo,\n  findOrCreateUser,\n};\n```"}]