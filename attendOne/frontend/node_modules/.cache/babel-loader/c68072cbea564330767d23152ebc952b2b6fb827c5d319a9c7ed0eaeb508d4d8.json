{"ast":null,"code":"var _jsxFileName = \"E:\\\\Attend\\\\fouadmahmoud281_obelion_20241114160659\\\\attendOne\\\\frontend\\\\src\\\\components\\\\PasswordReset\\\\PasswordReset.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './PasswordReset.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PasswordReset() {\n  _s();\n  const [email, setEmail] = useState('');\n  const [message, setMessage] = useState('');\n  const [error, setError] = useState('');\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      const response = await fetch('http://localhost:5000/api/auth/reset-password', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        setMessage(data.message || 'If an account with that email exists, a password reset link has been sent.');\n        setError('');\n      } else {\n        setError(data.error || 'An error occurred during password reset.');\n        setMessage('');\n      }\n    } catch (err) {\n      setError('An error occurred during password reset.');\n      setMessage('');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"password-reset-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Password Reset\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 25\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 23\n    }, this), !message && /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Email Address\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        id: \"email\",\n        value: email,\n        onChange: e => setEmail(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Reset Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n}\n_s(PasswordReset, \"+oC6IIAeBPUO7WCSW4CSxdFqDlU=\");\n_c = PasswordReset;\nexport default PasswordReset;\nvar _c;\n$RefreshReg$(_c, \"PasswordReset\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","PasswordReset","_s","email","setEmail","message","setMessage","error","setError","handleSubmit","e","preventDefault","response","fetch","method","headers","body","JSON","stringify","data","json","ok","err","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","type","id","value","onChange","target","required","_c","$RefreshReg$"],"sources":["E:/Attend/fouadmahmoud281_obelion_20241114160659/attendOne/frontend/src/components/PasswordReset/PasswordReset.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './PasswordReset.css';\r\n\r\nfunction PasswordReset() {\r\n    const [email, setEmail] = useState('');\r\n    const [message, setMessage] = useState('');\r\n    const [error, setError] = useState('');\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n\r\n        try {\r\n            const response = await fetch('http://localhost:5000/api/auth/reset-password', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ email }),\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (response.ok) {\r\n                setMessage(data.message || 'If an account with that email exists, a password reset link has been sent.');\r\n                setError('');\r\n            } else {\r\n                setError(data.error || 'An error occurred during password reset.');\r\n                setMessage('');\r\n            }\r\n        } catch (err) {\r\n            setError('An error occurred during password reset.');\r\n            setMessage('');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"password-reset-container\">\r\n            <h2>Password Reset</h2>\r\n            {message && <p>{message}</p>}\r\n            {error && <p className=\"error\">{error}</p>}\r\n            {!message && (\r\n                <form onSubmit={handleSubmit}>\r\n                    <label htmlFor=\"email\">Email Address</label>\r\n                    <input\r\n                        type=\"email\"\r\n                        id=\"email\"\r\n                        value={email}\r\n                        onChange={(e) => setEmail(e.target.value)}\r\n                        required\r\n                    />\r\n                    <button type=\"submit\">Reset Password</button>\r\n                </form>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PasswordReset;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}